"""flet"""

import re
from pathlib import Path

import flet as ft

SEED_BODY = r"""seed_h
<!DOCTYPE html>
<html lang="ja">
<!--THIS FILE IS GENERATED BY URLS EDITOR-->
<!--Sites: URL Station auto Generate-->
<!--Version: 1.0.0-->
<!--Author: Mel, Mel's Rough Sketch Lab.-->
<head>
    <meta charset="UTF-8" name="viewport" content="width=device-width, initial-scale=1.0">
    <title>URLs</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=M+PLUS+1+Code:wght@600&family=M+PLUS+Rounded+1c&family=Monomaniac+One&display=swap" rel="stylesheet">
    <link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" rel="stylesheet">
    <style>
      :root{
        --text-color-normal: black;
        --background-color-normal: white;
        --text-color-button: black;
        --background-color-button: #F0F0F0;
        --text-color-textarea: black;
        --background-color-textarea: white;
      }
      .dark-theme{
        --text-color-normal: #9CDCFE;
        --background-color-normal: black;
        --text-color-button: #5ED9C0;
        --background-color-button: #404040;
        --text-color-textarea: #5ED9C0;
        --background-color-textarea: black;
      }
      body{
        color: var(--text-color-normal);
        background-color: var(--background-color-normal);
      }
      h1{
        font-family: "Monomaniac One", sans-serif;
        font-weight: 400;
        font-style: normal;
      }
      details{
        display: inline-block;
      }
      .detail-content{
        position: relative;
        padding-left: 10px;
        overflow: hidden;
      }
      .detail-content::before{
        content: '';
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        border-left: 2px solid gray;
      }
      .dark-theme .detail-content::before{
        border-left: 2px solid #9C9CAE;
      }
      summary{
        font-size: 24px;
        font-family: "M PLUS 1 Code", monospace;
        font-optical-sizing: auto;
        font-weight: 600;
        font-style: normal;
      }
      a{
        display: inline-block;
        position: relative;
        overflow: hidden;
        text-decoration: none;
        vertical-align: middle;
      }
      a:after{
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 1px;
        background-color: black;
        transform: translate(-100%, 0);
        transition: transform cubic-bezier(0.215,0.61,0.355,1) 0.4s;
        content: "";
      }
      .dark-theme a:after{
        background-color: white;
      }
      a:hover:after{
        transform: translate(0,0)
      }
      a:link{color: blue;}
      a:visited{color: purple;}
      .dark-theme a:link{color: cyan;}
      .dark-theme a:visited{color: #6EE9D0;}
      button{
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        border: 2px solid transparent;
        border-radius: 100px;
        padding: 4px 8px;
        margin: 1px;
        color: var(--text-color-button);
        background-color: var(--background-color-button);
        transition: border-color 0.3s ease, color 0.3s ease;
        cursor: pointer;
      }
      button:hover {
        background-color: #444444;
        color: white;
      }
      button.active {
        background-color: white;
        border-color: #444444;
        color: #444444;
      }

      .dark-theme button:hover {
        background-color: #222222;
        border-color: var(--text-color-button);
        color: #AEFFFF;
      }
      .dark-theme button.active {
        background-color: #DEFFFF;
        border-color: var(--text-color-button);
        color: #222222;
      }
      #memo{
        width: 50%;
        right: 10px;
        position: fixed;
        height: 99%;
        top: 0;
        box-sizing: content-box;
        display: none;
        color: var(--text-color-textarea);
        background-color: var(--background-color-textarea);
        resize: none;
      }
      .copy-message{
        color: green;
        display: none;
      }
      .dark-theme .copy-message{
        color: #AEFFFF;
        display: none;
      }
      .key-viewer{
        color: deepskyblue;
        display: inline-block;
        vertical-align: middle;
      }
      .key-viewer-fullopen{
        color: red;
      }
      .dark-theme .key-viewer-fullopen{
        color: #E6DF99;
      }
      footer{
        color: gray;
        font-size: 12px;
      }
      .search_container{
        box-sizing: border-box;
        position: relative;
        border: 1px solid #999;
        padding: 3px 10px;
        border-radius: 20px;
        height: 2.3em;
        width: 450px;
        overflow: hidden;
      }
      .search_container input[type="text"]{
        border: none;
        height: 2.0em;
      }
      .search_container input[type="text"]:focus {
        outline: 0;
      }
      .search_container input[type="submit"]{
        cursor: pointer;
        font-family: FontAwesome;
        font-size: 1.3em;
        border: none;
        color: var(--text-color-textarea);
        background-color: var(--background-color-textarea);
        position: absolute;
        width: 2.5em;
        height: 2.5em;
        right: 0;
        top: -10px;
        outline : none;
      }
      #searchBox{
        color: var(--text-color-textarea);
        background-color: var(--background-color-textarea);
      }
    </style>
</head>

<body>
<textarea id="memo", placeholder="[メモ欄]"></textarea>

<h1>URL Station</h1>

<form class="search_container">
  <input type="text" size="50" id="searchBox" autocomplete="off" placeholder="Search on Google">
  <input type="submit" value="&#xf002" onclick="searchGoogle()">
</form>
<br>
seed_j
<br>

<button id="theme">ダークモード</button>
<script>
  //アニメーション定数
  const animTiming = {
    duration: 200,
    easing: "ease-in-out",
  };
  const closingAnimation = (content) => [
    {
        height: content.offsetHeight + "px",
        opacity: 1,
    },
    {
        height: 0,
        opacity: 0,
    },
  ];
  const openingAnimation = (content) => [
    {
        height: 0,
        opacity: 0,
    },
    {
        height: content.offsetHeight + "px",
        opacity: 1,
    },
  ];

  //ボタンアニメーション
  document.querySelectorAll('button').forEach(button => {
    button.addEventListener('mousedown', function(){
      this.classList.add('active');
      setTimeout(() => {
        this.classList.remove('active');
      }, 140)
    })
  })

  //テーマ保存
  const themeButton = document.querySelector('#theme');
  themeButton.onclick = function(){
    document.body.classList.toggle('dark-theme');
    themeButton.innerText = document.body.classList.contains('dark-theme') ? 'ライトモード' : 'ダークモード';
    localStorage.setItem('dark-theme', document.body.classList.contains('dark-theme'));
  }
  //ダークライトモード切替
  window.onload = function(){
    let isDarkTheme = localStorage.getItem('dark-theme');
    if(isDarkTheme === 'true'){
      document.body.classList.add('dark-theme');
      themeButton.innerText = 'ライトモード';
    }else{
      document.body.classList.remove('dark-theme');
      themeButton.innerText = 'ダークモード';
    }
  }

  //detailsの状態保存
  document.addEventListener('DOMContentLoaded', function() {
    let allDetails = document.querySelectorAll('details');

    allDetails.forEach((details) => {
      const summary = details.querySelector('.summary');
      const content = details.querySelector('.detail-content');

      let isOpen = localStorage.getItem(details.id);
      if (isOpen === 'false') {
        details.removeAttribute('open');
      }

      summary.addEventListener('click', (event) => {
        event.preventDefault();
        if(details.getAttribute('open') !== null){
            const closingAnim = content.animate(closingAnimation(content), animTiming);
            closingAnim.onfinish = () => {
                details.removeAttribute('open');
            };
        }else{
            details.setAttribute('open', 'true');
            const openingAnim = content.animate(openingAnimation(content),animTiming);
        }
      });

      details.addEventListener('toggle', function() {
        localStorage.setItem(details.id, details.open);
      });
    });
  });

  //メモ欄オープン
  function memo_toggle(key){
    let textarea = document.getElementById('memo');
    let button = document.getElementById('toggleButton');

    if(textarea.style.display !== 'block'){
      textarea.style.display = 'block';
      if(!key){
        textarea.focus();
      }
      button.innerHTML = 'メモ欄を閉じる';
    }
    else{
      textarea.style.display = 'none';
      button.innerHTML = 'メモ欄を開く';
    }
  };
  document.getElementById('toggleButton').onclick = () => memo_toggle(false);

  //メモ欄保存
  let memo_tab = document.getElementById('memo');
  memo_tab.addEventListener('input', function(){
    localStorage.setItem('memo', this.value);
  });

  //メモ欄の中身呼び出し
  window.addEventListener('DOMContentLoaded', function(){
    let savedText = localStorage.getItem('memo');
    if(savedText){
      memo_tab.value = savedText;
      memo_toggle(false);
    }
  });

  //メモ欄のtabキーの処理
  let tab_insert = function(e){
    if(e.key == 'Tab'){
      event.preventDefault();
      let start = this.selectionStart;
      let end = this.selectionEnd;
      let selectedText = this.value.substring(start, end);
      let beforeStart = this.value.substring(0, start);
      let indexOfStartOfLine = beforeStart.lastIndexOf('\n') + 1;

      let selectedTextIncludingWholeLines = this.value.substring(indexOfStartOfLine, end);
      let lines = selectedTextIncludingWholeLines.split('\n');

      if (lines.length >= 2 && start !== end) {
        if (e.shiftKey){
          var newTextIncludingWholeLines = selectedTextIncludingWholeLines.replace(/^\t/gm, '');
          this.selectionStart = start - newTextIncludingWholeLines.split('\n')[0].startsWith('\t') ? 1 : 0;
        }
        else{
          var newTextIncludingWholeLines = selectedTextIncludingWholeLines.replace(/^/gm, '\t');
          this.selectionStart = start + 1;
        }
        this.value = this.value.substring(0, indexOfStartOfLine)
          + newTextIncludingWholeLines
          + this.value.substring(end);

        this.selectionEnd = indexOfStartOfLine + newTextIncludingWholeLines.length;
      }else{
          this.value = this.value.substring(0, start) + "\t" + this.value.substring(end);
          this.selectionStart =
          this.selectionEnd = start + 1;
      }
      localStorage.setItem('memo', this.value);
    }
    //インデント整形
    if(e.keyCode == 13){
      e.preventDefault();
      let position = this.selectionStart;
      let end = this.selectionEnd;
      let textBefore = this.value.substring(0, position);
      let textAfter = this.value.substring(end, this.value.length);
      let prevNewlinePos = this.value.substr(0, position).lastIndexOf("\n");
      let leftPartLine = this.value.substring(prevNewlinePos + 1, position);
      let numOfTabs = 0;

      for (let i = 0; i < leftPartLine.length; i++) {
        if (leftPartLine[i] === "\t") {
          numOfTabs++;
        } else {
          break;
        }
      }
      let tabs = "\t".repeat(numOfTabs);
      if (
            textBefore.endsWith('(') && textAfter.startsWith(')') ||
            textBefore.endsWith('[') && textAfter.startsWith(']') ||
            textBefore.endsWith('{') && textAfter.startsWith('}')
          ){
              this.value = textBefore  + '\n' + tabs + '\t' + '\n' + tabs + textAfter;
              this.selectionStart = this.selectionEnd = position + 2 + tabs.length;
              e.preventDefault();
      }else{
          this.value = this.value.substring(0, position) + "\n" + tabs + this.value.substring(position);
          this.selectionStart = this.selectionEnd = position + tabs.length + 1;
          e.preventDefault();
      }
      localStorage.setItem('memo', this.value);
    }
  };
  //スペース-タブ変換
  function tabToSpace(){
    let text = memo_tab.value;
    memo_tab.value = text.replace(/\t/g, "    ");
  }
  function spaceToTab(){
    let text = memo_tab.value;
    memo_tab.value = text.replace(/    /g, "\t");
  }
  memo_tab.addEventListener('focus', function(){
    memo_tab.addEventListener('keydown', tab_insert);
  });
  memo_tab.addEventListener('blur', function(){
    memo_tab.removeEventListener('keydown', tab_insert);
  });

  //半角括弧閉じ処理
  document.getElementById('memo').addEventListener('keydown', function(e){
    let endBracket = false;
    if(e.key === '('){
      endBracket = ')';
    }else if(e.key === '{'){
      endBracket = '}';
    }else if(e.key === '['){
      endBracket = ']';
    }else if(e.key === "\""){
      endBracket = "\"";
    }else if(e.key === "'"){
      endBracket = "'";
    }

    let pos = this.selectionEnd;
    let textBefore = this.value.substring(0, pos);
    let textAfter = this.value.substring(pos, this.value.length);
    if(endBracket !== false){
      e.preventDefault();
      this.value = textBefore + e.key + endBracket + textAfter;
      this.selectionStart = pos + 1;
      this.selectionEnd = pos + 1;
    }
    if (
          textBefore.endsWith('(') && textAfter.startsWith(')') && e.key === ')' ||
          textBefore.endsWith('[') && textAfter.startsWith(']') && e.key === ']' ||
          textBefore.endsWith('{') && textAfter.startsWith('}') && e.key === '}'
        ){
          e.preventDefault();
          this.selectionStart = pos + 1;
          this.selectionEnd = pos + 1;
        }
    if (
        textBefore.endsWith("\"") && textAfter.startsWith("\"") && e.key === "\"" ||
        textBefore.endsWith("'") && textAfter.startsWith("'") && e.key === "'"
       ){
          e.preventDefault();

          let cursorPosition = this.selectionStart;
          let text = this.value;
          cursorPosition += 2
          // Remove the two characters after the cursor
          let newText = text.substring(0, cursorPosition - 2) + text.substring(cursorPosition);
          this.value = newText;
          // Set the cursor position
          this.selectionStart = cursorPosition - 2;
          this.selectionEnd = cursorPosition - 2;
        }
  });


  //メモ欄自動リサイズ
  window.onresize = function(){
    let memo_size = document.querySelector('#memo');
    let distanceFromLeft = window.innerWidth - memo_size.offsetWidth;

    if(distanceFromLeft < 480){
      memo_size.style.left = '470px';
    }
    else{
      memo_size.style.left = 'auto';
    }
  };

  //コピー処理
  function clipping(copyText) {
    navigator.clipboard.writeText(copyText);
  };
  //検索処理
  function searchGoogle() {
    var query = document.getElementById('searchBox').value;
    if (query.trim()){
      var url = 'https://www.google.com/search?q=' + query;
      window.open(url, '_blank');
    }
  }

  document.body.onkeydown = function(d){
    if(document.activeElement.id !== 'memo' && document.activeElement.id !== 'searchBox'){
seed_f
    }
  };

</script>
<footer>
<br><br><br>URL Station (Generation) 1.0.0<br>
</footer>
</body>
</html>
"""

COLOR_PALLETE = [
    ft.colors.LIGHT_BLUE_300,
    ft.colors.GREEN_300,
    ft.colors.LIME_300,
    ft.colors.ORANGE_300,
    ft.colors.DEEP_ORANGE_300,
]

SUB_COLOR_PALETTE = [
    ft.colors.LIGHT_BLUE_100,
    ft.colors.GREEN_100,
    ft.colors.LIME_100,
    ft.colors.ORANGE_100,
    ft.colors.DEEP_ORANGE_100,
]

TEXT_BG_COLOR_PALETTE = [
    ft.colors.LIGHT_BLUE_50,
    ft.colors.GREEN_50,
    ft.colors.LIME_50,
    ft.colors.ORANGE_50,
    ft.colors.DEEP_ORANGE_50,
]

EMBEDDING_COLOR_PALETTE = [
    ft.colors.LIGHT_BLUE_900,
    ft.colors.GREEN_900,
    ft.colors.LIME_900,
    ft.colors.ORANGE_900,
    ft.colors.DEEP_ORANGE_900,
]

KEY_CODE_DICT = {
    "A": "d.keyCode == 65",
    "B": "d.keyCode == 66",
    "C": "d.keyCode == 67",
    "D": "d.keyCode == 68",
    "E": "d.keyCode == 69",
    "F": "d.keyCode == 70",
    "G": "d.keyCode == 71",
    "H": "d.keyCode == 72",
    "I": "d.keyCode == 73",
    "J": "d.keyCode == 74",
    "K": "d.keyCode == 75",
    "L": "d.keyCode == 76",
    "M": "d.keyCode == 77",
    "N": "d.keyCode == 78",
    "O": "d.keyCode == 79",
    "P": "d.keyCode == 80",
    "Q": "d.keyCode == 81",
    "R": "d.keyCode == 82",
    "S": "d.keyCode == 83",
    "T": "d.keyCode == 84",
    "U": "d.keyCode == 85",
    "V": "d.keyCode == 86",
    "W": "d.keyCode == 87",
    "X": "d.keyCode == 88",
    "Y": "d.keyCode == 89",
    "Z": "d.keyCode == 90",
    "Alt": "d.altKey",
    "Shift + Space": "d.keyCode == 32 && d.shiftKey",
}

JAVASCRIPT_KEYDOWNS = []

URLS_PATH = Path("./URLs.html")
SEED_PATH = Path("./seed.html")

DETAIL_ID = 0


def sunitize(string: str):
    string = re.sub(r"<", "&lt;", string)
    string = re.sub(r">", "&gt;", string)
    return string


def de_sunitize(string: str):
    string = string.replace("&lt;", "<")
    string = string.replace("&gt;", ">")
    return string


def double_backslash(string: str):
    string = re.sub(r"\\", r"\\\\", string)
    return string.replace("\n", "\\n")


def de_double_backslash(string: str):
    ret_string = []
    back_slash_flag = False
    for char in string:
        if char == "\\":
            if back_slash_flag:
                back_slash_flag = False
                continue
            else:
                back_slash_flag = True
        else:
            back_slash_flag = False
        ret_string.append(char)

    return "".join(ret_string)


def flet_main(page: ft.Page):
    """run flet app"""
    page.title = "URLs Editor"
    page.bgcolor = ft.colors.GREY_100
    editor = Editor()
    page.add(editor)
    page.scroll = ft.ScrollMode.AUTO
    page.appbar = ft.AppBar(
        leading=ft.Icon(name=ft.icons.EDIT_SQUARE),
        leading_width=40,
        title=ft.Text("URLs Editor"),
        bgcolor=ft.colors.SURFACE_VARIANT,
        center_title=False,
        actions=[
            ft.FilledTonalButton(
                icon=ft.icons.SAVE_AS_OUTLINED,
                text="この内容を反映する",
                style=ft.ButtonStyle(
                    color=ft.colors.GREEN_ACCENT_200,
                ),
                on_click=edit_html,
            ),
            ft.Text("  "),
        ],
    )
    load_urls(page)
    page.update()


def load(editor):
    editor.details.controls = []
    editor.color_index = 0

    if not URLS_PATH.exists():
        snackbar = ft.SnackBar(
            ft.Text(
                "URLs.htmlが見つかりませんでしたが、新たに作成することができます。上のバーに表示されている歯車からプリセットを選択してみましょう。"
            ),
            bgcolor=ft.colors.YELLOW_500,
        )
        create_wrapper_detail(editor, "ツール/勤怠/申請系")
    else:
        multi_urls_pointers = []
        multi_urls_detect_flag = False

        urls_contents = URLS_PATH.read_text(encoding="utf-8").splitlines()
        if urls_contents[2].strip() != "<!--THIS FILE IS GENERATED BY URLS EDITOR-->":
            snackbar = ft.SnackBar(
                ft.Text(
                    "URLs.htmlのバージョンが古かったため、推奨されている構文以外は読み取れませんでした。"
                ),
                bgcolor=ft.colors.YELLOW_500,
            )
        else:
            snackbar = ft.SnackBar(
                ft.Text("読み込み完了。"),
                bgcolor=ft.colors.GREEN_ACCENT_200,
            )

        indentation_level = 0
        for content in urls_contents:
            if multi_urls_detect_flag:
                if content.strip().startswith("}"):
                    multi_urls_detect_flag = False
                    multi_urls_pointers[0].url.value = multi_urls_pointers[
                        0
                    ].url.value.strip()
                    del multi_urls_pointers[0]

                match = re.search(
                    r"""window.open\('(.*?)',""",
                    content.strip(),
                )
                if match:
                    multi_urls_pointers[0].url.value += (
                        de_double_backslash(de_sunitize(match.group(1))) + "\n"
                    )

            elif content.strip().startswith("<details "):
                if indentation_level == 0:
                    pointer = editor.add_click(None)
                    indentation_level += 1
                else:
                    pointer = pointer.add_click(None)
                    indentation_level += 1

            elif content.strip().startswith("""<summary class="summary">"""):
                match = re.search(
                    r'<summary class="summary">(.*?)</summary>', content.strip()
                )
                if match:
                    pointer.detail_name.value = de_sunitize(match.group(1))
                    if (
                        match.group(1) == "ツール/勤怠/申請系"
                        and indentation_level == 1
                    ):
                        pointer.detail_name.read_only = True
                        pointer.detail_name.icon = ft.icons.LOCK_OUTLINE_ROUNDED

            elif content.strip().startswith("""<span class="key-viewer">"""):
                match = re.search(
                    r'">\[(.*?)\]</span>.*?href="(.*?)".*?>(.*?)</a>',
                    content.strip(),
                )
                if match:
                    create_wrapper_url(
                        pointer,
                        de_double_backslash(de_sunitize(match.group(2))),
                        de_sunitize(match.group(3)),
                        match.group(1),
                    )

            elif content.strip().startswith("""<span class="key-viewer-fullopen">"""):
                match = re.search(
                    r'">\[(.*?)\]</span>(.*?)<br>',
                    content.strip(),
                )
                if match:
                    tmp_pointer = create_wrapper_multi_url(
                        pointer, de_sunitize(match.group(2)), match.group(1)
                    )
                    multi_urls_pointers.append(tmp_pointer)

            elif content.strip().startswith("""<a href="""):
                match = re.search(
                    r'href="(.*?)".*?>(.*?)</a>',
                    content.strip(),
                )
                if match:
                    create_wrapper_url(
                        pointer,
                        de_double_backslash(de_sunitize(match.group(1))),
                        de_sunitize(match.group(2)),
                    )

            elif content.strip().startswith("""<button onclick"""):
                match = re.search(
                    r"""<button onclick="clipping\('(.*?)'\)">(.*?) <i class="fa-regular fa-copy"></i></button>""",
                    content.strip(),
                )
                if match:
                    create_wrapper_copy(
                        pointer,
                        de_double_backslash(
                            de_sunitize(match.group(1).replace(r"\n", "\n"))
                        ),
                        de_sunitize(match.group(2)),
                    )

            elif content.strip().startswith("""<span>"""):
                match = re.search(
                    r"<span>(.*?)</span>",
                    content.strip(),
                )
                if match:
                    create_wrapper_text(pointer, de_sunitize(match.group(1)))

            elif content.strip().startswith("""<!--MANUAL LINE BREAK-->"""):
                pointer.add_line_break(None)

            elif content.strip().startswith("""</details>"""):
                pointer = pointer.parent_model
                indentation_level -= 1

            elif content.strip().startswith(
                "if (d.keyCode == 32 && d.shiftKey)"
            ) or content.strip().startswith("if (d.altKey)"):
                multi_urls_detect_flag = True

    return snackbar


def load_urls(page):
    """読み込み関数(実行時)"""
    snackbar = load(page.controls[0])
    page.update()
    page.overlay.append(snackbar)
    snackbar.open = True
    page.update()


def create_wrapper_detail(pointer, summary=""):
    ret_pointer = pointer.add_click(None)
    if summary != "":
        ret_pointer.detail_name.value = summary
        if summary == "ツール/勤怠/申請系":
            ret_pointer.detail_name.read_only = True
            ret_pointer.detail_name.icon = ft.icons.LOCK_OUTLINE_ROUNDED

    return ret_pointer


def create_wrapper_url(pointer, url, text, short_cut=""):
    tmp_pointer = pointer.add_url_click(None)
    if url != "":
        tmp_pointer.url.value = url
    if text != "":
        tmp_pointer.show_text.value = text
    if short_cut != "":
        tmp_pointer.drop_mune.value = short_cut


def create_wrapper_multi_url(pointer, text, short_cut=""):
    tmp_pointer = pointer.add_multi_url_click(None)
    if text != "":
        tmp_pointer.show_text.value = text
    if short_cut != "":
        tmp_pointer.drop_mune.value = short_cut
        return tmp_pointer


def create_wrapper_copy(pointer, body="", text=""):
    tmp_pointer = pointer.add_copy_click(None)
    if body != "":
        tmp_pointer.copy_body.value = body
    if text != "":
        tmp_pointer.show_text.value = text


def create_wrapper_text(pointer, text):
    tmp_pointer = pointer.add_text_click(None)
    if text != "":
        tmp_pointer.text.value = text


def edit_html(e):
    """書き込み関数"""
    global DETAIL_ID
    global JAVASCRIPT_KEYDOWNS
    seed_h = []
    seed_j = []
    seed_f = []
    seed_contents = SEED_BODY.splitlines(True)
    for content in seed_contents:
        if content.strip() == "seed_h":
            seed_pointer = seed_h
        elif content.strip() == "seed_j":
            seed_pointer = seed_j
        elif content.strip() == "seed_f":
            seed_pointer = seed_f
        else:
            seed_pointer.append(content)
    details = e.page.controls[0].get_format_all()
    formatted_list = seed_h + details + seed_j + JAVASCRIPT_KEYDOWNS + seed_f
    URLS_PATH.write_text(encoding="utf-8", data="".join(formatted_list))
    snackbar = ft.SnackBar(
        ft.Text("反映完了。URLs.htmlをすでに開いている場合はリロードしてください。"),
        bgcolor=ft.colors.GREEN_ACCENT_200,
    )
    e.page.overlay.append(snackbar)
    snackbar.open = True
    e.page.update()
    DETAIL_ID = 0
    JAVASCRIPT_KEYDOWNS = []


class Editor(ft.Column):
    def __init__(self):
        super().__init__()
        self.new_detail_button = ft.FilledTonalButton(
            icon=ft.icons.ADD,
            text="新しい段落を追加",
            on_click=self.add_click,
        )

        self.details = ft.Column(spacing=50)
        self.controls = [
            ft.Text(
                "段落：ツール/勤怠/申請系 は段落名を変更することができません。",
                color=ft.colors.GREY,
            ),
            self.details,
            ft.Text(),
            self.new_detail_button,
        ]
        self.color_index = 0

    def add_click(self, _):
        detail = Detail(
            None,
            self.detail_rotate_up,
            self.detail_rotate_down,
            self.detail_delete,
            self.color_index,
        )
        self.color_index += 1
        if self.color_index == len(COLOR_PALLETE):
            self.color_index = 0
        self.details.controls.append(detail)
        self.update()
        return detail

    def detail_delete(self, detail):
        self.details.controls.remove(detail)
        self.update()

    def detail_rotate_up(self, detail):
        index = self.details.controls.index(detail)
        element = self.details.controls.pop(index)
        if index == 0:
            self.details.controls.append(element)
        else:
            self.details.controls.insert(index - 1, element)
        self.update()

    def detail_rotate_down(self, detail):
        index = self.details.controls.index(detail)
        element = self.details.controls.pop(index)
        if index < len(self.details.controls):
            new_index = index + 1
        else:
            new_index = 0
        self.details.controls.insert(new_index, element)
        self.update()

    def get_format_all(self):
        ret_string = []
        for detail in self.details.controls:
            ret_string += detail.get_format_all()
        return ret_string


class Detail(ft.Column):
    def __init__(
        self, parent_model, rotate_up_func, rotate_down_func, delete_func, color_index
    ):
        super().__init__()
        self.color_index = color_index
        self.parent_model = parent_model
        self.detail_name = ft.TextField(
            label="段落名",
            label_style=ft.TextStyle(color=EMBEDDING_COLOR_PALETTE[self.color_index]),
            border_color=COLOR_PALLETE[self.color_index],
            bgcolor=TEXT_BG_COLOR_PALETTE[self.color_index],
            color=EMBEDDING_COLOR_PALETTE[self.color_index],
        )
        self.detail_rotate_up = rotate_up_func
        self.detail_rotate_down = rotate_down_func
        self.detail_delete = delete_func
        self.dummy_text = ft.Text(
            "  [新しい要素を追加してください]", color=ft.colors.BLACK45
        )
        self.childlen_length = 0
        self.childlen = ft.Column(controls=[self.dummy_text], spacing=10)
        self.controls = [
            ft.Row(
                spacing=0,
                controls=[
                    self.detail_name,
                    ft.PopupMenuButton(
                        icon_color=COLOR_PALLETE[self.color_index],
                        items=[
                            ft.PopupMenuItem(
                                content=ft.Row(
                                    controls=[
                                        ft.Icon(
                                            name=ft.icons.ARROW_CIRCLE_UP_ROUNDED,
                                        ),
                                        ft.Text("段落を上に移動"),
                                    ]
                                ),
                                on_click=self.rotate_up_click,
                            ),
                            ft.PopupMenuItem(
                                content=ft.Row(
                                    controls=[
                                        ft.Icon(
                                            name=ft.icons.ARROW_CIRCLE_DOWN_ROUNDED,
                                        ),
                                        ft.Text("段落を下に移動"),
                                    ]
                                ),
                                on_click=self.rotate_down_click,
                            ),
                            ft.PopupMenuItem(),
                            ft.PopupMenuItem(
                                content=ft.Row(
                                    controls=[
                                        ft.Icon(
                                            name=ft.icons.DELETE_OUTLINE,
                                            color=ft.colors.RED,
                                        ),
                                        ft.Text("段落を削除", color=ft.colors.RED),
                                    ]
                                ),
                                on_click=self.delete_click,
                            ),
                        ],
                    ),
                ],
            ),
            ft.Row(controls=[ft.Text("                    "), self.childlen]),
            ft.Row(
                controls=[
                    ft.Text("                    "),
                    ft.PopupMenuButton(
                        items=[
                            ft.PopupMenuItem(
                                content=ft.Row(
                                    controls=[
                                        ft.Icon(
                                            name=ft.icons.SETTINGS_ETHERNET_ROUNDED
                                        ),
                                        ft.Text("ただのテキストを追加"),
                                    ]
                                ),
                                on_click=self.add_text_click,
                            ),
                            ft.PopupMenuItem(
                                content=ft.Row(
                                    controls=[
                                        ft.Icon(name=ft.icons.LINK_ROUNDED),
                                        ft.Text("リンクを追加"),
                                    ]
                                ),
                                on_click=self.add_url_click,
                            ),
                            ft.PopupMenuItem(
                                content=ft.Row(
                                    controls=[
                                        ft.Icon(name=ft.icons.ADD_LINK_ROUNDED),
                                        ft.Text(
                                            "まとめて開くキーボードショートカットを追加"
                                        ),
                                    ]
                                ),
                                on_click=self.add_multi_url_click,
                            ),
                            ft.PopupMenuItem(
                                content=ft.Row(
                                    controls=[
                                        ft.Icon(name=ft.icons.COPY_OUTLINED),
                                        ft.Text("コピーボタンを追加"),
                                    ]
                                ),
                                on_click=self.add_copy_click,
                            ),
                            ft.PopupMenuItem(),
                            ft.PopupMenuItem(
                                content=ft.Row(
                                    controls=[
                                        ft.Icon(
                                            name=ft.icons.SUBDIRECTORY_ARROW_RIGHT_ROUNDED
                                        ),
                                        ft.Text("追加で改行する"),
                                    ]
                                ),
                                on_click=self.add_line_break,
                            ),
                            ft.PopupMenuItem(),
                            ft.PopupMenuItem(
                                content=ft.Row(
                                    controls=[
                                        ft.Icon(name=ft.icons.PLAYLIST_ADD_ROUNDED),
                                        ft.Text(
                                            "この段落に対して子段落を追加",
                                            color=ft.colors.CYAN,
                                        ),
                                    ]
                                ),
                                on_click=self.add_click,
                            ),
                        ],
                        content=ft.Container(
                            content=ft.Row(
                                controls=[
                                    ft.Icon(
                                        name=ft.icons.ADD,
                                        color=EMBEDDING_COLOR_PALETTE[self.color_index],
                                    ),
                                    ft.Text(
                                        "新しい要素の追加",
                                        color=EMBEDDING_COLOR_PALETTE[self.color_index],
                                    ),
                                ]
                            ),
                            bgcolor=SUB_COLOR_PALETTE[self.color_index],
                            width=150,
                            alignment=ft.alignment.center,
                            border_radius=ft.border_radius.all(30),
                        ),
                    ),
                ]
            ),
        ]

    def add_click(self, _):
        self.childlen_length += 1
        if self.childlen_length == 1:
            self.childlen.controls.remove(self.dummy_text)
        detail = Detail(
            self,
            self.child_rotate_up,
            self.child_rotate_down,
            self.child_delete,
            self.color_index,
        )
        self.childlen.controls.append(detail)
        self.update()
        return detail

    def add_url_click(self, _):
        self.childlen_length += 1
        if self.childlen_length == 1:
            self.childlen.controls.remove(self.dummy_text)
        urllink = UrlLink(
            self.child_rotate_up,
            self.child_rotate_down,
            self.child_delete,
            self.color_index,
        )
        self.childlen.controls.append(urllink)
        self.update()
        return urllink

    def add_multi_url_click(self, _):
        self.childlen_length += 1
        if self.childlen_length == 1:
            self.childlen.controls.remove(self.dummy_text)
        urllink = MultiUrlLink(
            self.child_rotate_up,
            self.child_rotate_down,
            self.child_delete,
            self.color_index,
        )
        self.childlen.controls.append(urllink)
        self.update()
        return urllink

    def add_copy_click(self, _):
        self.childlen_length += 1
        if self.childlen_length == 1:
            self.childlen.controls.remove(self.dummy_text)
        btn = CopyButton(
            self.child_rotate_up,
            self.child_rotate_down,
            self.child_delete,
            self.color_index,
        )
        self.childlen.controls.append(btn)
        self.update()
        return btn

    def add_text_click(self, _):
        self.childlen_length += 1
        if self.childlen_length == 1:
            self.childlen.controls.remove(self.dummy_text)
        text = NormalText(
            self.child_rotate_up,
            self.child_rotate_down,
            self.child_delete,
            self.color_index,
        )
        self.childlen.controls.append(text)
        self.update()
        return text

    def add_line_break(self, _):
        self.childlen_length += 1
        if self.childlen_length == 1:
            self.childlen.controls.remove(self.dummy_text)
        lbr = LineBreak(
            self.child_rotate_up,
            self.child_rotate_down,
            self.child_delete,
            self.color_index,
        )
        self.childlen.controls.append(lbr)
        self.update()

    def child_delete(self, child):
        self.childlen_length -= 1
        if self.childlen_length == 0:
            self.childlen.controls.append(self.dummy_text)
        self.childlen.controls.remove(child)
        self.update()

    def child_rotate_up(self, child):
        index = self.childlen.controls.index(child)
        element = self.childlen.controls.pop(index)
        if index == 0:
            self.childlen.controls.append(element)
        else:
            self.childlen.controls.insert(index - 1, element)
        self.update()

    def child_rotate_down(self, detail):
        index = self.childlen.controls.index(detail)
        element = self.childlen.controls.pop(index)
        if index < len(self.childlen.controls):
            new_index = index + 1
        else:
            new_index = 0
        self.childlen.controls.insert(new_index, element)
        self.update()

    def rotate_up_click(self, _):
        self.detail_rotate_up(self)

    def rotate_down_click(self, _):
        self.detail_rotate_down(self)

    def delete_click(self, _):
        self.detail_delete(self)

    def get_format_all(self):
        if not (
            self.parent_model is None and self.detail_name.value == "ツール/勤怠/申請系"
        ):
            if self.childlen_length == 0:
                return []

        global DETAIL_ID
        ret_string = []
        ret_string.append(rf"""<details id="detail-{str(DETAIL_ID)}" open>""" + "\n")
        name = self.detail_name.value
        if name == "":
            name = "中身が空でした"
        ret_string.append(
            rf"""    <summary class="summary">{sunitize(name)}</summary>""" + "\n"
        )
        ret_string.append(r"""    <div class="detail-content">""" + "\n")
        DETAIL_ID += 1
        if self.childlen_length != 0:
            for child in self.childlen.controls:
                ret_string.extend(
                    [
                        "    " + formatted_string
                        for formatted_string in child.get_format_all()
                    ]
                )
        if self.parent_model is None and name == "ツール/勤怠/申請系":
            ret_string.append(
                r"""    <br>メモ機能"""
                + "\n"
                + r"""    <br><button id="toggleButton">メモ欄を開く</button><br>"""
                + "\n"
                + r"""    <button onclick="tabToSpace()">タブ => スペース*4</button>  <button onclick="spaceToTab()">スペース*4 => タブ</button><br>"""
                + "\n"
            )
        ret_string.append(r"""    </div>""" + "\n")
        ret_string.append(r"""</details>""" + "\n")
        ret_string.append(r"""<br><br>""" + "\n\n")
        return ret_string


class UrlLink(ft.Row):
    def __init__(self, rotate_up_func, rotate_down_func, delete_func, color_index):
        super().__init__()
        self.rotate_up = rotate_up_func
        self.rotate_down = rotate_down_func
        self.delete = delete_func
        self.color_index = color_index

        self.url = ft.TextField(
            color=EMBEDDING_COLOR_PALETTE[self.color_index],
            bgcolor=ft.colors.GREY_100,
            border_color=EMBEDDING_COLOR_PALETTE[self.color_index],
            label="URL",
            label_style=ft.TextStyle(color=EMBEDDING_COLOR_PALETTE[self.color_index]),
            dense=True,
        )
        self.show_text = ft.TextField(
            color=EMBEDDING_COLOR_PALETTE[self.color_index],
            bgcolor=ft.colors.GREY_100,
            border_color=EMBEDDING_COLOR_PALETTE[self.color_index],
            label="ページ上に表示するテキスト",
            label_style=ft.TextStyle(color=EMBEDDING_COLOR_PALETTE[self.color_index]),
            dense=True,
        )
        self.drop_mune = ft.Dropdown(
            bgcolor=ft.colors.GREY_100,
            dense=True,
            color=EMBEDDING_COLOR_PALETTE[self.color_index],
            border_color=EMBEDDING_COLOR_PALETTE[self.color_index],
            icon_enabled_color=EMBEDDING_COLOR_PALETTE[self.color_index],
            width=150,
            label="キーボードショートカット",
            label_style=ft.TextStyle(color=EMBEDDING_COLOR_PALETTE[self.color_index]),
            options=[
                ft.dropdown.Option("設定しない"),
                ft.dropdown.Option("A"),
                ft.dropdown.Option("B"),
                ft.dropdown.Option("C"),
                ft.dropdown.Option("D"),
                ft.dropdown.Option("E"),
                ft.dropdown.Option("F"),
                ft.dropdown.Option("G"),
                ft.dropdown.Option("H"),
                ft.dropdown.Option("I"),
                ft.dropdown.Option("J"),
                ft.dropdown.Option("K"),
                ft.dropdown.Option("L"),
                ft.dropdown.Option("M"),
                ft.dropdown.Option("N"),
                ft.dropdown.Option("O"),
                ft.dropdown.Option("P"),
                ft.dropdown.Option("Q"),
                ft.dropdown.Option("R"),
                ft.dropdown.Option("S"),
                ft.dropdown.Option("T"),
                ft.dropdown.Option("U"),
                ft.dropdown.Option("V"),
                ft.dropdown.Option("W"),
                ft.dropdown.Option("X"),
                ft.dropdown.Option("Y"),
                ft.dropdown.Option("Z"),
            ],
            value="設定しない",
        )
        self.controls = [
            ft.Container(
                content=ft.Row(
                    controls=[
                        ft.Container(
                            content=ft.Icon(
                                name=ft.icons.LINK_ROUNDED,
                                color=TEXT_BG_COLOR_PALETTE[self.color_index],
                            ),
                            border_radius=ft.border_radius.all(15),
                            bgcolor=EMBEDDING_COLOR_PALETTE[self.color_index],
                            padding=6,
                        ),
                        self.url,
                        self.show_text,
                        self.drop_mune,
                        ft.PopupMenuButton(
                            icon_color=EMBEDDING_COLOR_PALETTE[self.color_index],
                            items=[
                                ft.PopupMenuItem(
                                    content=ft.Row(
                                        controls=[
                                            ft.Icon(
                                                name=ft.icons.ARROW_CIRCLE_UP_ROUNDED
                                            ),
                                            ft.Text("要素を上に移動"),
                                        ]
                                    ),
                                    on_click=self.rotate_up_click,
                                ),
                                ft.PopupMenuItem(
                                    content=ft.Row(
                                        controls=[
                                            ft.Icon(
                                                name=ft.icons.ARROW_CIRCLE_DOWN_ROUNDED
                                            ),
                                            ft.Text("要素を下に移動"),
                                        ]
                                    ),
                                    on_click=self.rotate_down_click,
                                ),
                                ft.PopupMenuItem(),
                                ft.PopupMenuItem(
                                    content=ft.Row(
                                        controls=[
                                            ft.Icon(
                                                name=ft.icons.DELETE_OUTLINE,
                                                color=ft.colors.RED,
                                            ),
                                            ft.Text("要素を削除", color=ft.colors.RED),
                                        ]
                                    ),
                                    on_click=self.delete_click,
                                ),
                            ],
                        ),
                    ]
                ),
                bgcolor=SUB_COLOR_PALETTE[self.color_index],
                padding=5,
                border_radius=ft.border_radius.all(5),
            )
        ]

    def rotate_up_click(self, _):
        self.rotate_up(self)

    def rotate_down_click(self, _):
        self.rotate_down(self)

    def delete_click(self, _):
        self.delete(self)

    def get_format_all(self):
        if self.url.value == "" or self.show_text.value == "":
            return []
        if self.drop_mune.value == "設定しない":
            key_string = ""
        else:
            JAVASCRIPT_KEYDOWNS.append(
                f"      if ({KEY_CODE_DICT[self.drop_mune.value]})" + "{\n"
                rf"        window.open('{double_backslash(sunitize(self.url.value)).strip()}','_blank','noopener noreferrer');"
                + "\n      }\n"
            )
            key_string = f"""<span class="key-viewer">[{self.drop_mune.value}]</span>"""

        return [
            rf"""{key_string}<a href="{double_backslash(sunitize(self.url.value)).strip()}" target="_blank" rel="noopener noreferrer">{sunitize(self.show_text.value)}</a><br>"""
            + "\n"
        ]


class MultiUrlLink(ft.Row):
    def __init__(self, rotate_up_func, rotate_down_func, delete_func, color_index):
        super().__init__()
        self.rotate_up = rotate_up_func
        self.rotate_down = rotate_down_func
        self.delete = delete_func
        self.color_index = color_index

        self.url = ft.TextField(
            color=EMBEDDING_COLOR_PALETTE[self.color_index],
            bgcolor=ft.colors.GREY_100,
            border_color=EMBEDDING_COLOR_PALETTE[self.color_index],
            label="URL",
            label_style=ft.TextStyle(color=EMBEDDING_COLOR_PALETTE[self.color_index]),
            dense=True,
            multiline=True,
            max_lines=5,
        )
        self.show_text = ft.TextField(
            color=EMBEDDING_COLOR_PALETTE[self.color_index],
            bgcolor=ft.colors.GREY_100,
            border_color=EMBEDDING_COLOR_PALETTE[self.color_index],
            label="説明テキスト",
            label_style=ft.TextStyle(color=EMBEDDING_COLOR_PALETTE[self.color_index]),
            dense=True,
        )
        self.drop_mune = ft.Dropdown(
            bgcolor=ft.colors.GREY_100,
            dense=True,
            color=EMBEDDING_COLOR_PALETTE[self.color_index],
            border_color=EMBEDDING_COLOR_PALETTE[self.color_index],
            icon_enabled_color=EMBEDDING_COLOR_PALETTE[self.color_index],
            width=150,
            label="キーボードショートカット",
            label_style=ft.TextStyle(color=EMBEDDING_COLOR_PALETTE[self.color_index]),
            options=[
                ft.dropdown.Option("Alt"),
                ft.dropdown.Option("Shift + Space"),
            ],
            value="Alt",
        )
        self.controls = [
            ft.Container(
                content=ft.Column(
                    controls=[
                        ft.Text(
                            "URLを複数指定するには、それぞれのURLの間で改行をしてください",
                            color=ft.colors.GREY,
                        ),
                        ft.Row(
                            controls=[
                                ft.Container(
                                    content=ft.Icon(
                                        name=ft.icons.ADD_LINK_ROUNDED,
                                        color=TEXT_BG_COLOR_PALETTE[self.color_index],
                                    ),
                                    border_radius=ft.border_radius.all(15),
                                    bgcolor=EMBEDDING_COLOR_PALETTE[self.color_index],
                                    padding=6,
                                ),
                                self.url,
                                self.show_text,
                                self.drop_mune,
                                ft.PopupMenuButton(
                                    icon_color=EMBEDDING_COLOR_PALETTE[
                                        self.color_index
                                    ],
                                    items=[
                                        ft.PopupMenuItem(
                                            content=ft.Row(
                                                controls=[
                                                    ft.Icon(
                                                        name=ft.icons.ARROW_CIRCLE_UP_ROUNDED
                                                    ),
                                                    ft.Text("要素を上に移動"),
                                                ]
                                            ),
                                            on_click=self.rotate_up_click,
                                        ),
                                        ft.PopupMenuItem(
                                            content=ft.Row(
                                                controls=[
                                                    ft.Icon(
                                                        name=ft.icons.ARROW_CIRCLE_DOWN_ROUNDED
                                                    ),
                                                    ft.Text("要素を下に移動"),
                                                ]
                                            ),
                                            on_click=self.rotate_down_click,
                                        ),
                                        ft.PopupMenuItem(),
                                        ft.PopupMenuItem(
                                            content=ft.Row(
                                                controls=[
                                                    ft.Icon(
                                                        name=ft.icons.DELETE_OUTLINE,
                                                        color=ft.colors.RED,
                                                    ),
                                                    ft.Text(
                                                        "要素を削除",
                                                        color=ft.colors.RED,
                                                    ),
                                                ]
                                            ),
                                            on_click=self.delete_click,
                                        ),
                                    ],
                                ),
                            ]
                        ),
                    ],
                ),
                bgcolor=SUB_COLOR_PALETTE[self.color_index],
                padding=5,
                border_radius=ft.border_radius.all(5),
            )
        ]

    def rotate_up_click(self, _):
        self.rotate_up(self)

    def rotate_down_click(self, _):
        self.rotate_down(self)

    def delete_click(self, _):
        self.delete(self)

    def get_format_all(self):
        if self.url.value.strip() == "" or self.show_text.value == "":
            return []

        javascipt_implements = (
            f"      if ({KEY_CODE_DICT[self.drop_mune.value]})" + "{\n"
        )
        urls = self.url.value.strip().split("\n")
        for url in urls:
            javascipt_implements += (
                rf"        window.open('{double_backslash(sunitize(url)).strip()}','_blank','noopener noreferrer');"
                + "\n"
            )
        javascipt_implements += "      }\n"

        JAVASCRIPT_KEYDOWNS.append(javascipt_implements)
        key_string = (
            f"""<span class="key-viewer-fullopen">[{self.drop_mune.value}]</span>"""
        )

        return [rf"""{key_string}{sunitize(self.show_text.value)}<br>""" + "\n"]


class CopyButton(ft.Row):
    def __init__(self, rotate_up_func, rotate_down_func, delete_func, color_index):
        super().__init__()
        self.rotate_up = rotate_up_func
        self.rotate_down = rotate_down_func
        self.delete = delete_func
        self.color_index = color_index
        self.copy_body = ft.TextField(
            color=EMBEDDING_COLOR_PALETTE[self.color_index],
            bgcolor=ft.colors.GREY_100,
            border_color=EMBEDDING_COLOR_PALETTE[self.color_index],
            label="クリップボードに書き込む内容",
            label_style=ft.TextStyle(color=EMBEDDING_COLOR_PALETTE[self.color_index]),
            multiline=True,
            max_lines=10,
            width=700,
            dense=True,
        )
        self.show_text = ft.TextField(
            color=EMBEDDING_COLOR_PALETTE[self.color_index],
            bgcolor=ft.colors.GREY_100,
            border_color=EMBEDDING_COLOR_PALETTE[self.color_index],
            label="ボタンに表示するテキスト",
            label_style=ft.TextStyle(color=EMBEDDING_COLOR_PALETTE[self.color_index]),
            width=200,
            dense=True,
        )
        self.controls = [
            ft.Container(
                content=ft.Row(
                    controls=[
                        ft.Container(
                            content=ft.Icon(
                                name=ft.icons.CONTENT_COPY_OUTLINED,
                                color=TEXT_BG_COLOR_PALETTE[self.color_index],
                            ),
                            border_radius=ft.border_radius.all(15),
                            bgcolor=EMBEDDING_COLOR_PALETTE[self.color_index],
                            padding=6,
                        ),
                        self.copy_body,
                        self.show_text,
                        ft.PopupMenuButton(
                            icon_color=EMBEDDING_COLOR_PALETTE[self.color_index],
                            items=[
                                ft.PopupMenuItem(
                                    content=ft.Row(
                                        controls=[
                                            ft.Icon(
                                                name=ft.icons.ARROW_CIRCLE_UP_ROUNDED
                                            ),
                                            ft.Text("要素を上に移動"),
                                        ]
                                    ),
                                    on_click=self.rotate_up_click,
                                ),
                                ft.PopupMenuItem(
                                    content=ft.Row(
                                        controls=[
                                            ft.Icon(
                                                name=ft.icons.ARROW_CIRCLE_DOWN_ROUNDED
                                            ),
                                            ft.Text("要素を下に移動"),
                                        ]
                                    ),
                                    on_click=self.rotate_down_click,
                                ),
                                ft.PopupMenuItem(),
                                ft.PopupMenuItem(
                                    content=ft.Row(
                                        controls=[
                                            ft.Icon(
                                                name=ft.icons.DELETE_OUTLINE,
                                                color=ft.colors.RED,
                                            ),
                                            ft.Text("要素を削除", color=ft.colors.RED),
                                        ]
                                    ),
                                    on_click=self.delete_click,
                                ),
                            ],
                        ),
                    ]
                ),
                bgcolor=SUB_COLOR_PALETTE[self.color_index],
                padding=5,
                border_radius=ft.border_radius.all(5),
            )
        ]

    def rotate_up_click(self, _):
        self.rotate_up(self)

    def rotate_down_click(self, _):
        self.rotate_down(self)

    def delete_click(self, _):
        self.delete(self)

    def get_format_all(self):
        if self.copy_body.value == "" or self.show_text.value == "":
            return []
        return [
            f"""<button onclick="clipping('{double_backslash(sunitize(self.copy_body.value))}')">{sunitize(self.show_text.value)} <i class="fa-regular fa-copy"></i></button><br>"""
            + "\n"
        ]


class NormalText(ft.Row):
    def __init__(self, rotate_up_func, rotate_down_func, delete_func, color_index):
        super().__init__()
        self.rotate_up = rotate_up_func
        self.rotate_down = rotate_down_func
        self.delete = delete_func
        self.color_index = color_index
        self.text = ft.TextField(
            color=EMBEDDING_COLOR_PALETTE[self.color_index],
            bgcolor=ft.colors.GREY_100,
            border_color=EMBEDDING_COLOR_PALETTE[self.color_index],
            label="内容",
            label_style=ft.TextStyle(color=EMBEDDING_COLOR_PALETTE[self.color_index]),
            width=500,
            dense=True,
        )
        self.controls = [
            ft.Container(
                content=ft.Row(
                    controls=[
                        ft.Container(
                            content=ft.Icon(
                                name=ft.icons.SETTINGS_ETHERNET_ROUNDED,
                                color=TEXT_BG_COLOR_PALETTE[self.color_index],
                            ),
                            border_radius=ft.border_radius.all(15),
                            bgcolor=EMBEDDING_COLOR_PALETTE[self.color_index],
                            padding=6,
                        ),
                        self.text,
                        ft.PopupMenuButton(
                            icon_color=EMBEDDING_COLOR_PALETTE[self.color_index],
                            items=[
                                ft.PopupMenuItem(
                                    content=ft.Row(
                                        controls=[
                                            ft.Icon(
                                                name=ft.icons.ARROW_CIRCLE_UP_ROUNDED
                                            ),
                                            ft.Text("要素を上に移動"),
                                        ]
                                    ),
                                    on_click=self.rotate_up_click,
                                ),
                                ft.PopupMenuItem(
                                    content=ft.Row(
                                        controls=[
                                            ft.Icon(
                                                name=ft.icons.ARROW_CIRCLE_DOWN_ROUNDED
                                            ),
                                            ft.Text("要素を下に移動"),
                                        ]
                                    ),
                                    on_click=self.rotate_down_click,
                                ),
                                ft.PopupMenuItem(),
                                ft.PopupMenuItem(
                                    content=ft.Row(
                                        controls=[
                                            ft.Icon(
                                                name=ft.icons.DELETE_OUTLINE,
                                                color=ft.colors.RED,
                                            ),
                                            ft.Text("要素を削除", color=ft.colors.RED),
                                        ]
                                    ),
                                    on_click=self.delete_click,
                                ),
                            ],
                        ),
                    ]
                ),
                bgcolor=SUB_COLOR_PALETTE[self.color_index],
                padding=5,
                border_radius=ft.border_radius.all(5),
            )
        ]

    def rotate_up_click(self, _):
        self.rotate_up(self)

    def rotate_down_click(self, _):
        self.rotate_down(self)

    def delete_click(self, _):
        self.delete(self)

    def get_format_all(self):
        if self.text.value == "":
            return []
        return [rf"<span>{sunitize(self.text.value)}</span><br>" + "\n"]


class LineBreak(ft.Row):
    def __init__(self, rotate_up_func, rotate_down_func, delete_func, color_index):
        super().__init__()
        self.rotate_up = rotate_up_func
        self.rotate_down = rotate_down_func
        self.delete = delete_func
        self.color_index = color_index
        self.controls = [
            ft.Container(
                content=ft.Row(
                    controls=[
                        ft.Container(
                            content=ft.Icon(
                                name=ft.icons.SUBDIRECTORY_ARROW_RIGHT_ROUNDED,
                                color=TEXT_BG_COLOR_PALETTE[self.color_index],
                            ),
                            border_radius=ft.border_radius.all(15),
                            bgcolor=EMBEDDING_COLOR_PALETTE[self.color_index],
                            padding=6,
                        ),
                        ft.PopupMenuButton(
                            icon_color=EMBEDDING_COLOR_PALETTE[self.color_index],
                            items=[
                                ft.PopupMenuItem(
                                    content=ft.Row(
                                        controls=[
                                            ft.Icon(
                                                name=ft.icons.ARROW_CIRCLE_UP_ROUNDED
                                            ),
                                            ft.Text("要素を上に移動"),
                                        ]
                                    ),
                                    on_click=self.rotate_up_click,
                                ),
                                ft.PopupMenuItem(
                                    content=ft.Row(
                                        controls=[
                                            ft.Icon(
                                                name=ft.icons.ARROW_CIRCLE_DOWN_ROUNDED
                                            ),
                                            ft.Text("要素を下に移動"),
                                        ]
                                    ),
                                    on_click=self.rotate_down_click,
                                ),
                                ft.PopupMenuItem(),
                                ft.PopupMenuItem(
                                    content=ft.Row(
                                        controls=[
                                            ft.Icon(
                                                name=ft.icons.DELETE_OUTLINE,
                                                color=ft.colors.RED,
                                            ),
                                            ft.Text("要素を削除", color=ft.colors.RED),
                                        ]
                                    ),
                                    on_click=self.delete_click,
                                ),
                            ],
                        ),
                    ]
                ),
                bgcolor=SUB_COLOR_PALETTE[self.color_index],
                padding=5,
                border_radius=ft.border_radius.all(5),
            )
        ]

    def rotate_up_click(self, _):
        self.rotate_up(self)

    def rotate_down_click(self, _):
        self.rotate_down(self)

    def delete_click(self, _):
        self.delete(self)

    def get_format_all(self):
        return ["<!--MANUAL LINE BREAK--><br>\n"]


if __name__ == "__main__":
    ft.app(target=flet_main)
